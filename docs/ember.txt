概念
    模板
        表达式 {{firstName}} 从控制器和模型接收数据放到html中，并保持自动更新
        插座 {{outlet}} 模板通过路由插入到插座中outlet助手将插座放到模板中
        视图 {{view}} 负责处理用户事件
    视图
        一个视图被嵌入在一个模板中，它负责把原始事件转成应用程序有意义的语义事件，然后将他们传输到控制器
        例如：一个视图将一个clcik事伯转成deleteItem事伯，然后将其发送给控制器，如果控制器未找到deleteItem事件，将发送给当前路由
    控制器
        存放应用程序状态的对象。模板会与控制器进行连接并将控制器的状态转变为HTML
        控制器扮演为模板呈现模型的表现的角色。控制顺口 将模型的属性传给模板，并且可以改变或增加模型来以一种模板期待的方式 来表现模型
    模型
        存储持久化状态的对象。
        使用Ember Data去将你的api服务器传递的原始JSON负载文件转换成更为全面的Ember对象，更好的关联性，计算属性及其它优点
    路由
        负责管理应用程序状态的对象
        当用户启动你的应用程序时，路由将查看URL并且确保显示正确的模板集，以及将那些模板与正确的模型对象配对。

EmberJS
    中文学习：http://emberjs.torriacg.org/guides/view_layer/
    官方网站：http://emberjs.com
    中文网站：http://emberjs.cn
    视频教程下载：http://dl.vmall.com/c0rwrda58y
    在线视频教程：http://ember101.com/videos/001-intro-and-binding-data-to-templates


    视图

        子视图：
        当应用时图重新渲染时，Ember 而不是应用代码负责重新渲染并插入子视图。这也意味 着 Ember 可以为你执行任何内存管理，比如清理观察者和绑定。

        事件委派:
        在容器元素上注册 一个监听器并使用 event.target 来识别哪个元素是用户点击的
        Ember 只为整个 Ember 应用注册一个事件，创建新视图永远都不需要 设置事件监听器，这使得重渲染高效且免于出错。当视图有一个子视图，这也意味着不 需要手动取消委派重新渲染过程中替换掉的视图。

        渲染管道：
        Ember 视图的近似生命周期
            1. 模板编译
                Ember 负责模板编译，你不需要做任何额外的工作来保证编译后的模板可以重 用。
            2. 字符串的连接
                通过向下遍历缓冲区树并把它们转换为字符串，我们就有了一个可以插入到 DOM 的字符串。
            3.元素的创建和插入
            4. 重新渲染

        视图层级：
            生命周期钩子:willInsertElement、didInsertElement、willDestroyElement、willRerender、becameVisible、becameHidden

        虚拟视图：

        事件冒泡：

        添加新事件：
            当你创建一个新应用时，你可以向事件分配器添加额外的事件

        模板化视图：>>> TODO http://emberjs.torriacg.org/guides/view_layer/#toc_


本地存储适配器： https://github.com/rpflorence/ember-localstorage-adapter


